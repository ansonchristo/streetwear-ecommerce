{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; //database\n\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAojJKMHk80n9iFqohdUMp1_a1g1VoeAQk\",\n  authDomain: \"crown-db-b0974.firebaseapp.com\",\n  databaseURL: \"https://crown-db-b0974.firebaseio.com\",\n  projectId: \"crown-db-b0974\",\n  storageBucket: \"crown-db-b0974.appspot.com\",\n  messagingSenderId: \"632007755384\",\n  appId: \"1:632007755384:web:55b4847ba32c80459f4f8d\",\n  measurementId: \"G-Y5Z44PNY1D\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); //snapshot represents data \n  //to do a CRUD method, need documentRef\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/ansonchristo/Desktop/ecomm-streetwear/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWE,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAG,CAACD,QAAJ,EAAc;AAGd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CANyE,CAMnC;AAEtC;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAMa,KAAN,EAAa;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AAEH;AAEJ;;AAED,SAAOf,OAAP;AAEH,CA9BM;AAgCPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'; //database\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAojJKMHk80n9iFqohdUMp1_a1g1VoeAQk\",\n    authDomain: \"crown-db-b0974.firebaseapp.com\",\n    databaseURL: \"https://crown-db-b0974.firebaseio.com\",\n    projectId: \"crown-db-b0974\",\n    storageBucket: \"crown-db-b0974.appspot.com\",\n    messagingSenderId: \"632007755384\",\n    appId: \"1:632007755384:web:55b4847ba32c80459f4f8d\",\n    measurementId: \"G-Y5Z44PNY1D\"\n  };\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n      if(!userAuth) return;\n      \n\n      const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n      const snapShot = await userRef.get(); //snapshot represents data \n\n      //to do a CRUD method, need documentRef\n    \n      if(!snapShot.exists) {\n          const {displayName, email} = userAuth;\n          const createdAt = new Date();\n\n          try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n          } catch(error) {\n              console.log('error creating user', error.message);\n\n          }\n\n      }\n\n      return userRef;\n\n  };\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  provider.setCustomParameters({prompt: 'select_account'});\n\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}